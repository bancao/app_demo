<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop.xsd   
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context.xsd   
        http://www.springframework.org/schema/mvc   
        http://www.springframework.org/schema/mvc/spring-mvc.xsd   
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 1. 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.cprt.demo.web" />

	<!-- 2. 扩充了注解驱动，可以将请求参数绑定到控制参数-->
	<mvc:annotation-driven />
	<!-- 3. 静态资源处理 css js images -->
	<!-- 
	<mvc:resources location="/static/images/" mapping="/images/**" cache-period="604800"/>
	<mvc:resources location="/static/js/" mapping="/js/**" />
	<mvc:resources location="/static/css/" mapping="/css/**" />
	 -->
	 
	 <!--  
	<mvc:resources location="/assets/" mapping="/assets/**" />
	<mvc:resources location="/css/" mapping="/css/**" />
	<mvc:resources location="/icons/" mapping="/icons/**" />
	<mvc:resources location="/ionicons/" mapping="/ionicons/**" />
	<mvc:resources location="/js/" mapping="/js/**" />
	<mvc:resources location="/" mapping="/**" />
	<mvc:resources location="/snippets_files/" mapping="/snippets_files/**" />
	 -->
	 
	<mvc:resources location="/contentbuilder/images/thumbnails/" mapping="/images/thumbnails/**" />
	<mvc:resources location="/contentbuilder/images/" mapping="/images/**" />
	<mvc:resources location="/contentbuilder/icons/css/" mapping="/icons/css/**" />
	<mvc:resources location="/contentbuilder/css/" mapping="/css/**" />
	<mvc:resources location="/contentbuilder/js/" mapping="/js/**" />
	
	
	<mvc:resources location="/" mapping="/**" />
	
	
	
	<!-- 4. 避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value> 
			</list>
		</property>
	</bean>

	<!--5. 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- JSON转换器 -->
			</list>
		</property>
	</bean>

	<!--6.  配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 上传文件最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
		<!-- 启用是为了推迟文件解析，以便捕获文件大小异常 -->
		<property name="resolveLazily" value="true" />
	</bean>

<!-- 7. 配置viewResolver。可以用多个viewResolver。使用order属性排序。InternalResourceViewResolver 放在最后 -->

	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
		<bean
			class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
			<property name="messageConverters">
				<list>
					<bean
						class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
						<property name="supportedMediaTypes">
							<list>
								<value>text/html;charset=UTF-8</value>
								<value>application/json;charset=UTF-8</value>
							</list>
						</property>
					</bean>
				</list>
			</property>
		</bean>


	
	<!-- 8. 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 9. 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> 
		<property name="securityManager" ref="securityManager" /> 
	</bean> 
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />
</beans>